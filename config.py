# Autogenerated config.py
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# Uncomment this to still load settings configured via autoconfig.yml
# config.load_autoconfig()

# pylint: disable=C0111
c = c  # noqa: F821 pylint: disable=E0602,C0103
config = config  # noqa: F821 pylint: disable=E0602,C0103

# Background color for hints. Note that you can use a `rgba(...)` value
# for transparency.
# Type: QssColor
c.colors.hints.bg = 'qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 rgba(255, 247, 133, 0.7), stop:1 rgba(255, 197, 66, 0.7))'

# Background color of the tab bar.
# Type: QtColor
c.colors.tabs.bar.bg = 'black'

# Background color of unselected even tabs.
# Type: QtColor
c.colors.tabs.even.bg = '#212121'

# Background color of unselected odd tabs.
# Type: QtColor
c.colors.tabs.odd.bg = '#424242'

# Background color of selected even tabs.
# Type: QtColor
c.colors.tabs.selected.even.bg = '#f47e17'

# Foreground color of selected even tabs.
# Type: QtColor
c.colors.tabs.selected.even.fg = 'black'

# Background color of selected odd tabs.
# Type: QtColor
c.colors.tabs.selected.odd.bg = '#f47e17'

# Foreground color of selected odd tabs.
# Type: QtColor
c.colors.tabs.selected.odd.fg = 'black'

# Whether quitting the application requires a confirmation.
# Type: ConfirmQuit
# Valid values:
#   - always: Always show a confirmation.
#   - multiple-tabs: Show a confirmation if multiple tabs are opened.
#   - downloads: Show a confirmation if downloads are running
#   - never: Never show a confirmation.
c.confirm_quit = ['downloads']

# Enables or disables plugins in Web pages.
# Type: Bool
c.content.plugins = True

# The proxy to use. In addition to the listed values, you can use a
# `socks://...` or `http://...` URL.
# Type: Proxy
# Valid values:
#   - system: Use the system wide proxy.
#   - none: Don't use any proxy
c.content.proxy = 'http://localhost:8118'

c.downloads.location.suggestion = 'both'
c.downloads.remove_finished = 30000

# Font used for the hints.
# Type: Font
c.fonts.hints = 'bold 12pt monospace'

# Font used in the statusbar.
# Type: Font
c.fonts.statusbar = '10pt monospace'

c.fonts.tabs = '8pt monospace'

# Which window to choose when opening links as new tabs. When
# `new_instance_open_target` is not set to `window`, this is ignored.
# Type: String
# Valid values:
#   - first-opened: Open new tabs in the first (oldest) opened window.
#   - last-opened: Open new tabs in the last (newest) opened window.
#   - last-focused: Open new tabs in the most recently focused window.
#   - last-visible: Open new tabs in the most recently visible window.
c.new_instance_open_target_window = 'last-focused'

# Enable smooth scrolling for web pages. Note smooth scrolling does not
# work with the `:scroll-px` command.
# Type: Bool
c.scrolling.smooth = False

# Open new tabs (middleclick/ctrl+click) in the background.
# Type: Bool
c.tabs.background = True

# Padding around text for tabs
# Type: Padding
c.tabs.padding = {'top': 2, 'bottom': 2, 'left': 5, 'right': 5}

# The position of the tab bar.
# Type: Position
# Valid values:
#   - top
#   - bottom
#   - left
#   - right
c.tabs.position = 'left'

# When to show the tab bar.
# Type: String
# Valid values:
#   - always: Always show the tab bar.
#   - never: Always hide the tab bar.
#   - multiple: Hide the tab bar if only one tab is open.
#   - switching: Show the tab bar when switching tabs.
c.tabs.show = 'always'

# The width of the tab bar if it's vertical, in px or as percentage of
# the window.
# Type: PercOrInt
c.tabs.width = '12%'

c.tabs.close_mouse_button_on_bar = 'close-current'

# Definitions of search engines which can be used via the address bar.
# Maps a searchengine name (such as `DEFAULT`, or `ddg`) to a URL with a
# `{}` placeholder. The placeholder will be replaced by the search term,
# use `{{` and `}}` for literal `{`/`}` signs. The searchengine named
# `DEFAULT` is used when `url.auto_search` is turned on and something
# else than a URL was entered to be opened. Other search engines can be
# used by prepending the search engine name to the search term, e.g.
# `:open google qutebrowser`.
# Type: Dict
c.url.searchengines = {
    'DEFAULT': 'https://google.nl/search?q={}',
    'gh': 'https://github.com/search?q={}',
    'cgh': 'https://github.corp.ebay.com/search?q={}',
    'yt': 'https://youtube.com/search?q={}'
}

c.session.lazy_restore = True

# Bindings for normal mode
config.bind(',c', 'spawn google-chrome-stable {url}')
#config.bind(',v', 'spawn mpv {url}')
config.bind(',v', 'spawn --userscript mpvOpen')
config.bind(',V', 'hint links userscript mpvOpen')
config.bind(',r', 'spawn --userscript screenReader')
config.bind(',l', 'spawn --userscript lookupWord')
config.bind(',g', 'spawn --userscript googleSelected')
config.bind(',zb', 'set zoom.default 180% ;; zoom 250%')
config.bind(',zm', 'set zoom.default 140% ;; zoom 180%')
config.bind(',zn', 'set zoom.default 100% ;; zoom 100%')
config.bind(',d', 'config-cycle content.user_stylesheets ~/.config/qutebrowser/themes/css/globalDark.css "" ;; reload')
